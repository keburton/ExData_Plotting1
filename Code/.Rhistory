pollutantmean1("specdata","nitrate", 70:72)
source("pollutantmeanv1.R")
pollutantmean1("specdata","nitrate", 70:72)
source("pollutantmeanv1.R")
pollutantmean1("specdata","nitrate", 70:72)
source("pollutantmeanv1.R")
pollutantmean1("specdata","nitrate", 70:72)
source("pollutantmeanv1.R")
pollutantmean1("specdata","nitrate", 70:72)
source("pollutantmeanv1.R")
pollutantmean1("specdata","nitrate", 70:72)
source("pollutantmeanv1.R")
pollutantmean1("specdata","nitrate", 70:72)
source("completev1.R")
complete("specdata",3)
complete("specdata",30:25)
source("pollutantmeanv1.R")
pollutantmean1("specdata","nitrate", 70:72)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## takes a matrix as an argument
## gets the value of that matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Checks to see if the inverse has been calculated
## If not, it computes the inverse and stores it
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
var <- matrix(1:4,2,2)
dc <- makeCacheMatrix(var)
dc2 <- dc$getinv()
dc$getinv()
dc$setinv()
dc$set()
dc$get()
library(swirl)
swirl()
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed,cars$dist)
plot(cars$dist, cars$speed)
plot(cars$speed,cars$dist,xlab = "Speed")
plot(cars$speed,cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(cars$speed,cars$dist, ylab = "Stopping Distance")
plot(cars$speed,cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(cars$dist, cars$speed, main = "My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, c(10,15))
plot(cars, xlim=c(10,15))
plot(cars, pch=2
)
library(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
install_from_swirl("Data Analysis")
install_from_swirl("Getting and Cleaning Data")
swirl()
cars
cars$mpgCity
myMPG -> cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
14
16
library(xlsx)
library(dplyr)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
quiz <- read.xlsx("quiz.xlsx",sheetIndex = 1,header=TRUE)
quiz1 <-tbl_df(quiz)
quiz1
quiz <- read.xlsx("quiz.xlsx",sheetIndex = 1,header=TRUE, stringsAsFactors=FALSE)
quiz1 <-tbl_df(quiz)
quiz1
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx("quiz.xlsx",sheetIndex = 1,rowIndex = rowIndex,colIndex = colIndex)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages(XML)
library(XML)
install.packages("XML")
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
"
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- download.file(fileURL,useInternal=TRUE,method = "curl")
doc <- xmlTreeParse(fileURL,useInternal=TRUE)
filepath <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
install.packages("data.table")
library(data.table)
DT <- fread(filepath,sep = ",")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15);mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2)
system.time(rowMeans(DT)[DT$SEX==2])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT$pwgtp15,by=DT$SEX)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL)
doc <- xmlParse(fileURL)
doc <- xmlParse(fileURL, useInternalNodes = FALSE)
doc <- xmlTreeParse("http://www.w3schools.com/xml/simple.xml")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlParse(fileURL)
htmlTreeParse(fileURL)
doc <- htmlTreeParse(fileURL)
doc
doc <- xmlTreeParse("http://www.w3schools.com/xml/simple.xml")
doc
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml)
?xmlTreeParse
source("quiz.R")
install.packages("httpuv")
source("quiz.R")
source("quiz.R")
req
json1 <- content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
?toJSON
json2 <- to JSON(json1)
json2 <- to JSON(json1,pretyy=TRUE)
json1
data2 <- fromJSON(content(req))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
names(json2)
library(dplyr)
json3 <- tbl_df(json2)
head(json2)
json2$url
json2[[8]]
json[8,]
json2[8,]
install.packages("sqldf")
filepath <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(filepath,destfile = "acssql.csv", method="curl")
acs <- read.csv("acssql.csv", stringsAsFactors = FALSE)
sqldf("select pwgtp1 from acs where AGEP<50")
library(sqldf)
pw1 <- sqldf("select pwgtp1 from acs where AGEP<50")
nrow(pw1)
head(pw1)
age <- sqldf("select AGEP where unique from acs")
age <- sqldf("select distinct AGEP from acs")
head(age)
library(XML)
filepath <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- htmlTreeParse(filepath)
doc
class(doc)
root <- xmlRoot(doc)
class(root)
html <- htmlTreeParse(filepath,useInternalNodes = T)
names(html)
class(html)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
class(htmlCode)
htmlCode[15]
head(htmlCode)
htmlCode[10]
nchar(html[10])
ch <- html[10]
nchar(htmlCode[10])
nchar(htmlCode[9])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?fwf
filepath <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
?read.fwf
data2 <- read.fwf(filepath,skip=4,
fwf_widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
data2 <- read.fwf(filepath,skip=4,
widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
data2 <- read.fwf(filepath,skip=4,widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
library(readr)
data2 <- read_fwf(filepath,skip=4,fwf_widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
head(data2)
sum(data2$X4)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
source("course.R")
source("course.R")
names(data)
class(data)
head(data)
library(dplyr)
df <- read.table("household_power_consumption.txt", sep=)
df <- read.table("household_power_consumption.txt", sep=";", header=TRUE)
data2 <- tbl_df(df)
head(data2)
?unz
df <- read.table("household_power_consumption.txt", sep=";", header=TRUE, stringsAsFactors = FALSE)
data2 <- tbl_df(df)
head(data2)
tbd <- data2 %>% filter(Date >= 2007/02/01, Date < 2007/02/03 )
tbd
data2$Date <- as.Date(data2$Date)
head(data2)
head(df)
gf <- df[,1:100]
gf <- df[1:100,]
strptime(gf$Date,"%Y/%m/%d")
as.Date(gf$Date)
library(data.table)
data2 <- fread("household_power_consumption.txt",sep = ";", stringsAsFactors = FALSE,header = TRUE)
table(data2[,Date>2007/02/01])
table(data2[,Date>=2007/02/01 & Date<2007/02/03])
power <- data2[,Date>=2007/02/01 & Date<2007/02/03]
nrow(power)
class(power)
power <- data2[Date>=2007/02/01 & Date<2007/02/03,]
class(power)
names(power)
head(power)
power$Date <- as.Date(power$Date)
head(power)
power2 <- power[Date>=2007-02-01 & Date< 2007-02-03,]
tail(power)
data2$Date <- as.Date(data2$Date, format = "%Y/%m/%d")
head(data2)
tail(data2)
tail(power)
head(data2)
data2 <- fread("household_power_consumption.txt")
head(data2)
power <- data2
head(power)
power$Date <- as.Date(power$Date,format="%d/%m/%Y")
head(power)
power2 <- power[Date >= 2007-02-01 & Date < 2007-02-03,]
power2 <- power[,Date >= 2007-02-01 & Date < 2007-02-03]
power2 <- power[Date >= 2007-02-01,]
power2 <- power[Date >= "2007-02-01",]
power3 <- power2[Date < "2007-02-03",]
head(power3)
tail(power3)
plot(hist(power$Global_active_power))
?hist
class(power2$Global_active_power)
hist(as.numeric(power3$Global_active_power))
hist(as.numeric(power3$Global_active_power),main="Global Active Power", xlab="Global Active Power(kilowatts)", col=red)
hist(as.numeric(power3$Global_active_power),main="Global Active Power", xlab="Global Active Power(kilowatts)", col="red")
plot(power3$Time, power3$Global_active_power)
class(power3$Time)
power3$Time <- as.POSIXct(power3$Time,format="%H:%M:%S")
class(power3$Time)
xrange <- range(power3$Time)
plot(power3$Time, power3$Global_active_power,xlim=xrange)
plot(power3$Time, power3$Global_active_power,xlim=xrange, type="l")
par(xaxp)
par("xaxp")
par(xaxp=c(1,3,1))
plot(power3$Time, power3$Global_active_power,xlim=xrange, type="l")
plot(power3$Time, power3$Global_active_power,xlim=xrange, type="l",ylab="Global Active Power")
plot(power3$Time, power3$Global_active_power,xlim=xrange, type="l",ylab="Global Active Power", cex.lab=1)
plot(power3$Time, power3$Global_active_power,xlim=xrange, type="l",ylab="Global Active Power", cex.lab=1, xlab="Time")
par()
names(power3)
axis(1,labels = c("Thursday","Friday","Saturday"))
plot(power3$Time, power3$Global_active_power,xlim=xrange, type="l",ylab="Global Active Power", axes=FALSE, xlab="Time")
axis(1,labels = c("Thursday","Friday","Saturday"))
weekdays(power3$Date)
plot(weekdays(power3$Time), power3$Global_active_power,xlim=xrange, type="l",ylab="Global Active Power", xlab="Time")
plot(power3$Time, power3$Global_active_power,xlim=xrange, type="l",ylab="Global Active Power", xlab="Time")
axis(1,labels = weekdays(power3$Date))
plot(power3$Time, power3$Global_active_power,xlim=xrange, type="l",ylab="Global Active Power", xlab="Time", xaxt="n")
axis(1,at=1:3,labels=paste(c("weds","thur","fri")))
axis(1,at=1:3000,labels=paste(c("weds","thur","fri")))
axis(1, power3$Date, format(power3$Date, "%A"))
axis(1, power3$Date, format(power3$Date, "%A"), cex.axis=0.7)
tsd <- weekdays(power3$Date)
tsd
power4 <- power3[,Day:=weekdays(power3$Date)]
head(power4)
plot(power4$Day, power4$Global_active_power, xlab = "", ylab="Global Active Power")
plot(power4$Day, power4$Global_active_power, xlab = "", ylab="Global Active Power",xlim=xrange)
power5 <- power4[complete.cases(power4),]
class(power5)
names(power5)
plot(power5$Day, power5$Global_active_power, xlab = "", ylab="Global Active Power",xlim=xrange)
class(power5$Day)
power5[1:3,]
plot(power5$Date, power4$Global_active_power, xlab = "", ylab="Global Active Power",xlim=xrange, axes = FALSE)
plot(power3$Date, power3$Global_active_power, xlab = "", ylab="Global Active Power",xlim=xrange, axes = FALSE)
plot(power3$Date, power3$Global_active_power, ylab="Global Active Power",xlim=xrange, axes = FALSE)
power <- fread("household_power_consumption.txt")
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
head(power)
power1 <- power[((power$Date=="2007-02-01") | (power$Date)=="2007-02-02"),]
power1$Time <- as.POSIXct(power1$Time)
power1$Time <- as.POSIXct(power1$Time, format="%H:%M:%S")
power1$Global_active_power <- as.numeric(power1$Global_active_power)
xrange <- range(power1$Time)
power <- fread("household_power_consumption.txt")
power1 <- power[((power$Date=="2007-02-01") | (power$Date)=="2007-02-02"),]
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
power1 <- power[((power$Date=="2007-02-01") | (power$Date)=="2007-02-02"),]
?transform
class(power1)
power1 <- power1[,dttm := as.POSIXct(paste(Date,Time), format = "%Y-%m-%d %H:%M:%S")]
names(power1)
xrange <- range(power1$dttm)
plot(power1$dttm, as.numeric(power1$Global_active_power), ylab="Global Active Power",type="l")
plot(power1$dttm, as.numeric(power1$Global_active_power), ylab="Global Active Power (kilowatts)",type="l")
plot(power1$dttm, as.numeric(power1$Global_active_power), ylab="Global Active Power (kilowatts)",type="l", xlab="")
power1$Sub_metering_1 <- as.numeric(power1$Sub_metering_1)
power1$Sub_metering_2 <- as.numeric(power1$Sub_metering_2)
power1$Sub_metering_3 <- as.numeric(power1$Sub_metering_3)
xlim <- range(c(power1$Sub_metering_1,power1$Sub_metering_2,power1$Sub_metering_3))
plot(power1$dttm,power$Sub_metering_1)
plot(power1$dttm,power1$Sub_metering_1)
plot(power1$dttm,power1$Sub_metering_1, type='l')
lines(power1$Sub_metering_2,col="red")
lines(power1$Sub_metering_3,col="blue")
title("gimme")
lines(power1$dttm,power1$Sub_metering_2,col="red")
lines(power1$dttm,power1$Sub_metering_3,col="blue")
?legend
legend("topright",c("Sub Metering 1","Sub Metering", "Sub Metering 3"), col=c("black","red","blue"))
legend("topright",c("Sub Metering 1","Sub Metering", "Sub Metering 3"), lty="solid",col=c("black","red","blue"))
plot(power1$dttm,power1$Sub_metering_1, type='l', xlab="",ylab="Energy sub metering")
lines(power1$dttm,power1$Sub_metering_2,col="red")
lines(power1$dttm,power1$Sub_metering_3,col="blue")
legend("topright",c("Sub Metering 1","Sub Metering", "Sub Metering 3"), lty="solid",col=c("black","red","blue"))
par(mfrow=c(2,2))
plot(power1$dttm, as.numeric(power1$Global_active_power),
ylab="Global Active Power (kilowatts)",type="l", xlab="")
plot(power1$dttm, as.numeric(power1$Global_active_power),
ylab="Global Active Power (kilowatts)",type="l", xlab="")
power1
class(power1$Voltage)
power1$Voltage <- as.numeric(power1$Voltage)
plot(power1$dttm,power1$Voltage, type='l',xlab="datetime",ylab="Voltage")
plot(power1$dttm,power1$Sub_metering_1, type='l', xlab="",ylab="Energy sub metering")
lines(power1$dttm,power1$Sub_metering_2,col="red")
lines(power1$dttm,power1$Sub_metering_3,col="blue")
legend("topright",c("Sub Metering 1","Sub Metering", "Sub Metering 3"), lty="solid",col=c("black","red","blue"))
legend("topright",c("Sub Metering 1","Sub Metering 2", "Sub Metering 3"), lty="solid",col=c("black","red","blue"))
class(power1$Global_active_power)
power1$Global_reactive_power <- as.numeric(power1$Global_reactive_power)
plot(power1$dttm,power1$Global_reactive_power,xlab="datetime",ylab="global_reactive_power")
plot(power1$dttm,power1$Global_reactive_power,xlab="datetime",ylab="global_reactive_power" type='l')
plot(power1$dttm,power1$Global_reactive_power,xlab="datetime",ylab="global_reactive_power", type='l')
save.image("~/Documents/Programming/DataSci/Exploratory Course Proj 1.RData")
source("plot1.R")
source("plot1.R")
source("plot1.R")
head(data)
source("plot1.R")
names(data)
load("~/Documents/Programming/DataSci/Exploratory Course Proj 1.RData")
dates <- seq("2007-02-01","2007-02-02",1)
dates <- seq(from = "2007-02-01",to = "2007-02-02",by=1)
data1 <- data[(data$Date=="2007-02-01"|data$Date=="2007-02-02")]
nrow(data1)
data1 <- data[(data$Date=="2007-02-01"| data$Date=="2007-02-02"),]
nrow(data1)
data1 <- data[((data$Date=="2007-02-01")| (data$Date=="2007-02-02")),]
nrow(data1)
head(data)
data$Date <- as.Date(data$Date,format="%d/%m/%Y")
data1 <- data[((data$Date=="2007-02-01")| (data$Date=="2007-02-02")),]
nrow(data1)
data1 <- data[(data$Date=="2007-02-01"| data$Date=="2007-02-02"),]
nrow(data1)
names(data1)
debugSource('~/Documents/Programming/DataSci/plot1.R')
setwd("~/Documents/Programming/DataSci/ExData_Plotting1/Code")
library(datasets)
library(cars)
data("cars")
head(cars)
library(data.table)
Cars <- data.table(cars)
cars[(speed>8 | speed < 5),]
Cars[(speed>8 | speed < 5),]
class(power1)
pw <- power1[(Date == "2007-02-01" | Date=="2007-02-02"),]
pw <- power[(Date == "2007-02-01" | Date=="2007-02-02"),]
names(pw)
pw[,dttm := as.POSIXct(paste(c(Date,Time)), format="%Y-%m-%d %H:%M:%S")]
names(pw)
pw[,dttm := as.POSIXct(paste(Date,Time), format="%Y-%m-%d %H:%M:%S")]
library(data.table)
if (!file.exists("exdata-data-household_power_consumption.zip")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
temp)
data <- read.table(unz(temp, "household_power_consumption.txt"),
sep=";", header = TRUE, stringsAsFactors = FALSE)
unlink(temp)
}
dt <- data.table(data)
data$Date <- as.Date(data$Date,format="%d/%m/%Y")
power <- data[(data$Date=="2007-02-01"| data$Date=="2007-02-02"),]
power$Global_active_power <- as.numeric(power$Global_active_power)
power[,dttm := as.POSIXct(paste(Date,Time), format="%Y-%m-%d %H:%M:%S")]
plot(power$dttm, power1$Global_active_power,
ylab="Global Active Power (kilowatts)",type="l", xlab="")
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
class(power)
class(dt)
class(dt$Date)
dt1 <- dt
dt1 <- dt1[,as.Date(Date, format="%d/%m/%Y")]
class(dt1)
dt[,dttm := as.POSIXct(paste(Date,Time), format="%Y-%m-%d %H:%M:%S")]
names(dt)
head(dt$dttm)
library(dplyr)
pw <- data[(Date == "2007-02-01" | Date=="2007-02-02"),]
pw <- data[(data$Date == "2007-02-01" | data$Date=="2007-02-02"),]
mutate(pw, dttm = as.POSIXct(paste(Date,Time), format="%Y-%m-%d %H:%M:%S"))
pw1 <- tbl_df(pw)
pw1 <- mutate(pw1, dttm = as.POSIXct(paste(Date,Time), format="%Y-%m-%d %H:%M:%S"))
head(pw1)
head(pw1$dttm)
data <- tbl_df(data)
dt <- filter(data, data$Date =="2007-02-01" | data$Date == "2007-02-02")
library(dplyr)
if (!file.exists("exdata-data-household_power_consumption.zip")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
temp)
data <- read.table(unz(temp, "household_power_consumption.txt"),
sep=";", header = TRUE, stringsAsFactors = FALSE)
unlink(temp)
}
dt <- tbl_df(data)
dt$Date <- as.Date(dt$Date,format="%d/%m/%Y")
power <- filter(data, data$Date =="2007-02-01" | data$Date == "2007-02-02")
power$Global_active_power <- as.numeric(power$Global_active_power)
power <- mutate(power, dttm = as.POSIXct(paste(Date,Time),
format="%Y-%m-%d %H:%M:%S"))
plot(power$dttm, power$Global_active_power,
ylab="Global Active Power (kilowatts)",type="l", xlab="")
dev.copy(png, file="plot2.png", width=480, height=480)
dev.off()
cat(getwd(), "now contains Plot2.png ")
class(dt)
class(dt$Date)
power <- filter(data, data$Date =="2007-02-01" | data$Date == "2007-02-02")
power <- filter(dt, Date =="2007-02-01" | Date == "2007-02-02")
library(dplyr)
if (!file.exists("exdata-data-household_power_consumption.zip")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
temp)
data <- read.table(unz(temp, "household_power_consumption.txt"),
sep=";", header = TRUE, stringsAsFactors = FALSE)
unlink(temp)
}
dt <- tbl_df(data)
dt$Date <- as.Date(dt$Date,format="%d/%m/%Y")
power <- filter(dt, Date =="2007-02-01" | Date == "2007-02-02")
power$Global_active_power <- as.numeric(power$Global_active_power)
power <- mutate(power, dttm = as.POSIXct(paste(Date,Time),
format="%Y-%m-%d %H:%M:%S"))
plot(power$dttm, power$Global_active_power,
ylab="Global Active Power (kilowatts)",type="l", xlab="")
dev.copy(png, file="plot2.png", width=480, height=480)
dev.off()
cat(getwd(), "now contains Plot2.png ")
source("plot4.R")
